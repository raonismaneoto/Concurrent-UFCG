package robocodeNEAT;

import java.io.File;
import java.util.Arrays;

import robocode.control.BattleSpecification;
import robocode.control.BattlefieldSpecification;
import robocode.control.RobocodeEngine;
import robocode.control.RobotSpecification;

public class BattleController {
	
	private static BattleController instance;

    private File robocodeHome;
    private RobocodeEngine engine;
    BattleObserver observer;
    
    private static final int NUM_ROUNDS = 20;
    private RobotSpecification[] robots;
    
    public static BattleController getController() {
    	if(instance == null) instance = new BattleController();
    	return instance;
    }
    
    private BattleController() {
        robocodeHome = new File("C:\\robocode"); 
        engine = new RobocodeEngine(robocodeHome);
        robots = new RobotSpecification[4];
        
        observer = new BattleObserver(false);
        engine.addBattleListener(observer);
        
        for(RobotSpecification robotSpec : engine.getLocalRepository()) {
        	if(robotSpec.getNameAndVersion().equals("robocodeNEAT.RobotNEAT* 1.01")) {
        		robots[0] = robotSpec;
        	} else if(robotSpec.getName().equals("sample.Crazy")) {
        		robots[1] = robotSpec;
        	} else if(robotSpec.getName().equals("sample.Walls")) {
        		robots[2] = robotSpec;
        	} else if(robotSpec.getName().equals("supersample.SuperRamFire")) {
        		robots[3] = robotSpec;
        	}
        }
    }
    
    public double[] battleEveryone() { 
    	double[] report = new double[robots.length - 1];
    	RobotSpecification[] participants = new RobotSpecification[2];
    	
    	participants[0] = robots[0];
    	for(int i = 1; i < robots.length; i++) {
    		participants[1] = robots[i];
    		report[i-1] = automatedBattle(participants);
    	}
    	//System.out.println(Arrays.toString(report));
    	return report;
    }

    private double automatedBattle(RobotSpecification[] participants) {
        BattlefieldSpecification battlefield = new BattlefieldSpecification();
        BattleSpecification specs = new BattleSpecification(NUM_ROUNDS, battlefield, participants);
        
        engine.runBattle(specs, true);
        return observer.score;
    }
    
    /* private void visibleBattle() {
    	engine = new RobocodeEngine(robocodeHome);
        BattlefieldSpecification battlefield = new BattlefieldSpecification();
        BattleSpecification specs = new BattleSpecification(NUM_ROUNDS, battlefield, robots);
        
        BattleObserver observer = new BattleObserver(true);
        engine.addBattleListener(observer);
    	engine.setVisible(true);

        engine.runBattle(specs, true);
        engine.close();
    } */

    public static void main(String[] args) {
    	BattleController bc = new BattleController();
    	bc.engine.setVisible(true);
		System.out.println(Arrays.toString(bc.battleEveryone()));
		System.out.println("Done");
    }
}